// Jonathan Chandler
// Rabbit.C

#include "Rabbit.h"

Rabbit::Rabbit(int x1, int y1, int t1, Grassland * g1, bool l) \
: Animal(x1, y1, t1, g1){
	lazy = l;
	if(isLazy())
		setTime(t1 + 1);
	else
		setTime(t1 + 2);
}

bool Rabbit::doit(int i){
	//cout << "RABBIT TURN! -- " << i << " -- STARTING POSITION:  " << x << ", " << y << endl;
        int j, k;
	if(isLazy()){			// Lazy rabbit dies at 450
		if(i - born >= 450){
			//cout << "RABBIT DIES OF OLD AGE!" << endl;
			g->killLRabbit(this, x, y);
			return false;
		}
	}
	else{
		if(i - born >= 750 && random()%21 <= 1){  // Active rabbit 5% chance of dying at 750
			//cout << "RABBIT DIES OF OLD AGE!" << endl;
			g->killARabbit(this, x, y);
			return false;
		}
	}
        int mobility;
	if(isLazy())
        	mobility = 5;
       	else
               	mobility = 10;
	/* RANDOM FUNCTIONALITY
	LList * list = new LList();
	int listSize = 0;
	*/
	int choice = random()%4;
	if(choice == 0){
		for(j = x - mobility; j <= x + mobility; j++){
       			if(j >= 0 && j < 512){
             			for(k = y - mobility; k <= y + mobility; k++){
                    			if(k >= 0 && k < 512){
                           		 	if(g->hasGrass(i, j, k) && g->available(j, k)){
							//cout << "RABBIT FOUND FOOD!" << endl;
							g->killGrass(i, j, k);
        				 	       lastEat = i;
  							g->setAnimal(x, y, NULL);
				               		g->setAnimal(j, k, this);
							if(isLazy())
				                		setTime(i + 1);
							else
								setTime(i + 2);
  						        x = j;
              						y = k; 
							return true;
							//cout << "FINAL POSITION:  " << x << ", " << y << endl;
							//list->push(j, k);  RANDOM FUNCTIONALITY
							//listSize++;
                     	        		}
                    	       		}
             	        	}
               		}
		}
	}
	else if(choice == 1){
		for(j = x - mobility; j <= x + mobility; j++){
       			if(j >= 0 && j < 512){
             			for(k = y + mobility; k >= y - mobility; k--){
                    			if(k >= 0 && k < 512){
                           		 	if(g->hasGrass(i, j, k) && g->available(j, k)){
							//cout << "RABBIT FOUND FOOD!" << endl;
							g->killGrass(i, j, k);
        				 	       lastEat = i;
  							g->setAnimal(x, y, NULL);
				               		g->setAnimal(j, k, this);
							if(isLazy())
				                		setTime(i + 1);
							else
								setTime(i + 2);
  						        x = j;
              						y = k; 
							return true;
							//cout << "FINAL POSITION:  " << x << ", " << y << endl;
							//list->push(j, k);  RANDOM FUNCTIONALITY
							//listSize++;
                     	        		}
                    	       		}
             	        	}
               		}
		}
	}
	else if(choice == 2){
		for(j = x + mobility; j >= x - mobility; j--){
       			if(j >= 0 && j < 512){
             			for(k = y - mobility; k <= y + mobility; k++){
                    			if(k >= 0 && k < 512){
                           		 	if(g->hasGrass(i, j, k) && g->available(j, k)){
							//cout << "RABBIT FOUND FOOD!" << endl;
							g->killGrass(i, j, k);
        				 	       lastEat = i;
  							g->setAnimal(x, y, NULL);
				               		g->setAnimal(j, k, this);
							if(isLazy())
				                		setTime(i + 1);
							else
								setTime(i + 2);
  						        x = j;
              						y = k; 
							return true;
							//cout << "FINAL POSITION:  " << x << ", " << y << endl;
							//list->push(j, k);  RANDOM FUNCTIONALITY
							//listSize++;
                     	        		}
                    	       		}
             	        	}
               		}
		}
	}
	else if(choice == 3){
		for(j = x + mobility; j >= x - mobility; j--){
       			if(j >= 0 && j < 512){
             			for(k = y + mobility; k >= y - mobility; k--){
                    			if(k >= 0 && k < 512){
                           		 	if(g->hasGrass(i, j, k) && g->available(j, k)){
							//cout << "RABBIT FOUND FOOD!" << endl;
							g->killGrass(i, j, k);
        				 	       lastEat = i;
  							g->setAnimal(x, y, NULL);
				               		g->setAnimal(j, k, this);
							if(isLazy())
				                		setTime(i + 1);
							else
								setTime(i + 2);
  						        x = j;
              						y = k; 
							return true;
							//cout << "FINAL POSITION:  " << x << ", " << y << endl;
							//list->push(j, k);  RANDOM FUNCTIONALITY
							//listSize++;
                     	        		}
                    	       		}
             	        	}
               		}
		}
	}
	/*  RANDOM FUNCTIONALITY		
	if(listSize > 0){
		LNode * node = list->get(random()%listSize); 
		j = node->x;
		k = node->y;
		//cout << "RABBIT FOUND FOOD!" << endl;
		g->killGrass(i, j, k);
                lastEat = i;
  		g->setAnimal(x, y, NULL);
                g->setAnimal(j, k, this);
		if(isLazy())
                	setTime(i + 1);
		else
			setTime(i + 2);
                x = j;
                y = k; 
		//cout << "FINAL POSITION:  " << x << ", " << y << endl;
                delete list;
		return true;
	}
	else
		delete list;
	*/
	if(isLazy() && (i - lastEat) >= 5){	//Lazy rabbit hasn't eaten in 5 days, dies
		//cout << "LAZY RABBIT DIES OF HUNGER!" << endl;
		g->killLRabbit(this, x, y);
		return false;
	}
	else if(!isLazy() && (i - lastEat) >= (18 + random()%5)){	//Active rabbit hasn't eaten in 18-22 days, dies
		//cout << "ACTIVE RABBIT DIES OF HUNGER!" << endl;
		g->killARabbit(this, x, y);
		return false;
	}
	if(isLazy())
                setTime(i + 1);
        else
		setTime(i + 2);
	return true; 
	//cout << "FINAL POSITION:  " << x << ", " << y << endl;
}
